(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{379:function(e,r,a){"use strict";a.r(r);var t=a(42),n=Object(t.a)({},(function(){var e=this,r=e.$createElement,a=e._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"reward-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reward-function"}},[e._v("#")]),e._v(" Reward Function")]),e._v(" "),a("h2",{attrs:{id:"how-to-simplified-reward-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-simplified-reward-function"}},[e._v("#")]),e._v(" How to simplified reward function?")]),e._v(" "),a("p",[e._v("https://www.linkedin.com/pulse/aws-deepracer-tips-tricks-how-build-powerful-rewards-wong/")]),e._v(" "),a("p",[e._v("https://www.youtube.com/watch?v=az84Jd2_WH4")]),e._v(" "),a("p",[e._v("As in the reward function windows in AWS Deepracer can not import other libraries and the it is too simple,")]),e._v(" "),a("p",[e._v("To build a complex reward function like regression or gaussian, we do the heavy lifting.")]),e._v(" "),a("h2",{attrs:{id:"how-the-reward-function-validation-works"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-the-reward-function-validation-works"}},[e._v("#")]),e._v(" How the reward function validation works?")]),e._v(" "),a("p",[e._v("It copies our reward function code to a Lambda Function")]),e._v(" "),a("p",[e._v("Library can be invoke from AWS DeepRacer Reward Function API. Reward functions makes call to API Gateway only")]),e._v(" "),a("p",[e._v("import urllib.request\nimport urllib.parse\nimport json")]),e._v(" "),a("p",[e._v('def reward_function(params):\nurl = \'https://xxxxx.execute-api.us-east-1.amazonaws.com/Prod/reward/\'\nquery_string = urllib.parse.urlencode({"json": json.dumps(params)})\nurl = url + "?" + query_string\nwith urllib.request.urlopen(url) as response:\nresponse_text = response.read().decode(\'utf-8\')\nresult = json.loads(response_text)\nreturn float(result["reward"])')]),e._v(" "),a("h2",{attrs:{id:"reward-function-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reward-function-example"}},[e._v("#")]),e._v(" Reward Function Example")]),e._v(" "),a("p",[e._v("Powerful rewards function with Photoshop\nColor line tracking and reward based on colour")]),e._v(" "),a("h2",{attrs:{id:"image-processing-with-pillow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#image-processing-with-pillow"}},[e._v("#")]),e._v(" Image Processing with Pillow")]),e._v(" "),a("ul",[a("li",[e._v("using pillow")])]),e._v(" "),a("ol",[a("li",[e._v("Crop a circle around the deepracer")]),e._v(" "),a("li",[e._v("Rotate the image to make x-axis becomes the heading direction")]),e._v(" "),a("li",[e._v("Extract RGB color points and return the failure reward if the number of color point is less than threshold")])]),e._v(" "),a("h2",{attrs:{id:"angle-calculation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#angle-calculation"}},[e._v("#")]),e._v(" Angle Calculation")]),e._v(" "),a("ul",[a("li",[e._v("using sklearn and sympy geometry")]),e._v(" "),a("li",[e._v("User linear regression from sklearn and get a regression line over all over all color points")]),e._v(" "),a("li",[e._v("heading is x-axes, black line is the regression line and orange line represent the current steering angle. Convert the slop of regression line into degree and it is the target direction")])]),e._v(" "),a("p",[e._v("regression_ray = get_linear_regression_ray(color_points, params)\ncenter = Point(full_range / 2, full_range / 2)\nperpendicular_distance = float(regression_ray.distance(center).evalf())\nprint(\"perpendicular distance: \", str(perpendicular_distance))\ntarget_direction = math.degrees(atan(regression_ray.slope))\nsteering_angle = params['steering_angle']\nsteering_ray = Ray(Point(full_range / 2, full_range / 2)), angle=math.radians(steering_angle))\nangle_diff = target_dircetion - params['steering_angle']")]),e._v(" "),a("h2",{attrs:{id:"distance-reward"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#distance-reward"}},[e._v("#")]),e._v(" Distance Reward")]),e._v(" "),a("p",[e._v("use numpy and sympy to calculate the perpendicular distance of DeepRacer from the regression line and reduce the vqalue over Gaussian distribution as smoothing.")]),e._v(" "),a("p",[e._v("def gaussian(x, mu, sig):\nreturn np.exp(-np.power(x-mu, 2.)/ (2 * np.power(sig, 2.)))")]),e._v(" "),a("h2",{attrs:{id:"demo-workshop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#demo-workshop"}},[e._v("#")]),e._v(" Demo Workshop")]),e._v(" "),a("p",[e._v("AWS Cloud9")])])}),[],!1,null,null,null);r.default=n.exports}}]);